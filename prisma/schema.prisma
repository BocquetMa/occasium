generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

enum Role {
  SUPER_ADMIN
  PRESIDENT
  VICE_PRESIDENT
  TRESORIER
  SECRETAIRE
  ADMIN
  MODERATEUR
  MEMBRE_ACTIF
  MEMBRE
  VISITEUR
}

enum AssociationStatus {
  PENDING
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum MembershipStatus {
  PENDING
  ACTIVE
  SUSPENDED
  EXPELLED
}

enum EventVisibility {
  PUBLIC
  MEMBERS_ONLY
  PRIVATE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  EVENT_CREATED
  EVENT_UPDATED
  INVITATION_RECEIVED
  MEMBERSHIP_APPROVED
  PHOTO_ADDED
  ROLE_CHANGED
  GENERAL
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  globalRole Role    @default(VISITEUR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships         Membership[]
  createdAssociations Association[]     @relation("CreatedAssociations")
  events              Event[]           @relation("EventOrganizer")
  eventRegistrations  EventRegistration[]
  createdAlbums       PhotoAlbum[]      @relation("AlbumCreator")
  uploadedPhotos      Photo[]           @relation("PhotoUploader")
  sentInvitations     Invitation[]      @relation("InvitationSender")
  notifications       Notification[]

  @@map("users")
}

model Association {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?
  logo        String?
  website     String?
  email       String?
  phone       String?
  address     String?
  status      AssociationStatus @default(PENDING)
  isPublic    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById Int

  creator     User          @relation("CreatedAssociations", fields: [createdById], references: [id])
  memberships Membership[]
  events      Event[]
  albums      PhotoAlbum[]
  invitations Invitation[]

  @@map("associations")
}

model Membership {
  id            Int              @id @default(autoincrement())
  userId        Int
  associationId Int
  role          Role             @default(MEMBRE)
  status        MembershipStatus @default(PENDING)
  joinedAt      DateTime         @default(now())
  notes         String?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  association Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@unique([userId, associationId])
  @@map("memberships")
}

model Event {
  id               Int             @id @default(autoincrement())
  title            String
  description      String
  location         String?
  date             DateTime
  endDate          DateTime?
  capacity         Int?
  maxParticipants  Int?
  price            Decimal?        @default(0)
  isRecurring      Boolean         @default(false)
  recurrenceRule   String?
  image            String?
  visibility       EventVisibility @default(PUBLIC)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  associationId    Int
  organizerId      Int

  association   Association         @relation(fields: [associationId], references: [id], onDelete: Cascade)
  organizer     User                @relation("EventOrganizer", fields: [organizerId], references: [id])
  registrations EventRegistration[]
  albums        PhotoAlbum[]

  // ðŸ”¥ Ajout des relations pour catÃ©gories et tags
  eventCategories EventCategory[]
  eventTags       EventTag[]

  @@map("events")
}

model EventRegistration {
  id            Int           @id @default(autoincrement())
  userId        Int
  eventId       Int
  paymentStatus PaymentStatus @default(PENDING)
  paidAt        DateTime?
  amount        Decimal?
  notes         String?
  createdAt     DateTime      @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model PhotoAlbum {
  id            Int      @id @default(autoincrement())
  associationId Int
  title         String
  description   String?
  eventId       Int?
  isPublic      Boolean  @default(true)
  createdById   Int
  createdAt     DateTime @default(now())

  association Association @relation(fields: [associationId], references: [id], onDelete: Cascade)
  event       Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
  creator     User        @relation("AlbumCreator", fields: [createdById], references: [id])
  photos      Photo[]

  @@map("photo_albums")
}

model Photo {
  id               Int              @id @default(autoincrement())
  albumId          Int
  url              String
  caption          String?
  uploadedById     Int
  moderationStatus ModerationStatus @default(PENDING)
  createdAt        DateTime         @default(now())

  album      PhotoAlbum @relation(fields: [albumId], references: [id], onDelete: Cascade)
  uploadedBy User       @relation("PhotoUploader", fields: [uploadedById], references: [id])

  @@map("photos")
}

model Invitation {
  id            Int       @id @default(autoincrement())
  associationId Int
  email         String
  role          Role      @default(MEMBRE)
  token         String    @unique
  expiresAt     DateTime
  invitedById   Int
  acceptedAt    DateTime?
  createdAt     DateTime  @default(now())

  association Association @relation(fields: [associationId], references: [id], onDelete: Cascade)
  invitedBy   User        @relation("InvitationSender", fields: [invitedById], references: [id])

  @@map("invitations")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  entityId  Int?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

//
// ðŸ”¥ Nouveaux modÃ¨les pour CatÃ©gories & Tags
//
model Category {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  events EventCategory[]
}

model Tag {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  events EventTag[]
}

model EventCategory {
  eventId    Int
  categoryId Int

  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([eventId, categoryId])
}

model EventTag {
  eventId Int
  tagId   Int

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([eventId, tagId])
}
